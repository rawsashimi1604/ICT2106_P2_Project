import React, { useState, useEffect } from "react";
import {
  Box,
  Select,
  Text,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  Button,
  useDisclosure,
  Flex
} from "@chakra-ui/react";
import { Line } from "react-chartjs-2";
import CarbonFootprintService from "requests/services/CarbonFootprintService";
import "../Analytics.css";
import ErrorWidget from "../widgets/ErrorWidget";
import LoadingWidget from "../widgets/LoadingWidget";
import { LazyMotion, domAnimation, AnimatePresence } from "framer-motion";

const options = {
  legend: {
    labels: {
      font: {
        size: 30,
      },
    },
  },
  scales: {
    x: {
      beginAtZero: true,
      title: {
        display: true,
        text: "Month",
        font: {
          size: 20,
          weight: "bold",
        },
      },
      ticks: {
        font: {
          size: 20,
        },
      },
    },
    y: {
      beginAtZero: false,
      title: {
        display: true,
        text: "Carbon Footprint (Watts)",
        font: {
          size: 20,
          weight: "bold",
        },
      },
      ticks: {
        max: 500000,
        font: {
          size: 20,
        },
      },
    },
  },
};

function CarbonChartModal({ onClose, size, isOpen }) {
  const SESSION_ACCOUNT_GUID = "11111111-1111-1111-1111-111111111111";

  const [graphData, setGraphData] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState(null);
  const [selectedYear, setSelectedYear] = useState(null);

  const {
    isOpen: isErrorOpen,
    onOpen: onErrorOpen,
    onClose: onErrorClose,
  } = useDisclosure();

  const {
    isOpen: isLoadingOpen,
    onOpen: onLoadingOpen,
    onClose: onLoadingClose,
  } = useDisclosure();

  function getCarbonFootprintData() {
    setGraphData(null);
    onLoadingOpen();
    CarbonFootprintService.getCarbonFootprintData(
      SESSION_ACCOUNT_GUID,
      selectedYear,
      selectedMonth
    )
      .then((response) => {
        console.log(response);
        const carbonFootprintData = response.data.data;
        console.log(carbonFootprintData[0].householdConsumption)
        console.log(carbonFootprintData[0].nationalHouseholdConsumption)
        const graph = {
          labels: [],
          datasets: [
            {
              label: "My Household Carbon Footprint",
              backgroundColor: "rgb(255, 99, 132)",
              borderColor: "rgb(255, 99, 132)",
              data: [],
            },
            {
              label: "National Household Average Carbon Footprint",
              backgroundColor: "rgb(124,252,0)",
              borderColor: "rgb(124,252,0)",
              data: [],
            },
          ],
        };

        graph.datasets[0].data = carbonFootprintData.map((data) => {
          return data.householdConsumption;
        });
        graph.datasets[1].data = carbonFootprintData.map((data) => {
          return data.nationalHouseholdConsumption;
        });
        graph.labels = carbonFootprintData.map((data) => {
          return `${data.yearOfAnalysis}-${data.monthOfAnalysis
            .toString()
            .padStart(2, "0")}`;
        });
        setGraphData(graph);
        onLoadingClose();
      })
      .catch((err) => {
        onLoadingClose();
        onErrorOpen();
      });
  }

  const dropDownHandler1 = (e) => {
    let value = e.target.value || 1; // set default value to "1" if e.target.value is false
    setSelectedMonth(value);
    // getCarbonFootprintData();
  };

  const dropDownHandler2 = (e) => {
    let value = e.target.value || 2023; // set default value to "2023" if e.target.value is falsy
    setSelectedYear(value);
  };

  useEffect(() => {
    getCarbonFootprintData();
  }, [selectedMonth, selectedYear]);

  return (
    <>
      <LazyMotion features={domAnimation}>
        <AnimatePresence>
          <Modal onClose={onClose} size={size} isOpen={isOpen}>
            <ErrorWidget
              onClose={onErrorClose}
              size="xl"
              isOpen={isErrorOpen}
            />

            <LoadingWidget
              onClose={onLoadingClose}
              size="xl"
              isOpen={isLoadingOpen}
            />
            <ModalOverlay />
            <ModalContent>
              <ModalHeader>Carbon Footprint</ModalHeader>
              <ModalCloseButton />
              <ModalBody>
                <Text>
                  This is your carbon footprint. Carbon footprint is the total
                  amount of greenhouse gases (including carbon dioxide and
                  methane) that are generated by our actions.
                </Text>

                <Box paddingTop="15">
                  <Text>Select the month and year:</Text>
                  <Box display="flex" alignItems="center" paddingBottom={10}>
                    {/* Month dropdown */}
                    <Select
                      placeholder="Month"
                      onChange={(e) =>
                        dropDownHandler1({
                          target: { value: parseInt(e.target.value) || 1 },
                        })
                      }
                      width={"200px"}
                      variant="filled"
                      mr={2}
                    >
                      <option value={1}>January</option>
                      <option value={2}>February</option>
                      <option value={3}>March</option>
                      <option value={4}>April</option>
                      <option value={5}>May</option>
                      <option value={6}>June</option>
                      <option value={7}>July</option>
                      <option value={8}>August</option>
                      <option value={9}>September</option>
                      <option value={10}>October</option>
                      <option value={11}>November</option>
                      <option value={12}>December</option>
                    </Select>
                    {/* Year dropdown */}
                    <Select
                      placeholder="Year"
                      onChange={(e) =>
                        dropDownHandler2({
                          target: { value: parseInt(e.target.value) || 2023 },
                        })
                      }
                      width={"200px"}
                      variant="filled"
                    >
                      <option value={2022}>2022</option>
                      <option value={2023}>2023</option>
                      {/* add more years as needed */}
                    </Select>
                  </Box>
                </Box>
                <Flex 
                    direction="column"
                    justify="center"
                    align="start"
                    width="70%"
                    
                  >
                  {graphData && <Line options={options} data={graphData} />}
                </Flex>
              </ModalBody>

              <ModalFooter>
                <Button onClick={onClose}>Close</Button>
              </ModalFooter>
            </ModalContent>
          </Modal>
        </AnimatePresence>
      </LazyMotion>
    </>
  );
}

export default CarbonChartModal;
