import React, { useState, useEffect } from "react";
import Chart from "chart.js/auto";
import {
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Box,
  Select,
  Center,
  Container,
  Text,
  Heading,
  Flex,
} from "@chakra-ui/react";
import { Line } from "react-chartjs-2";
import { BiErrorCircle } from "react-icons/bi"
import { CgSpinnerAlt } from "react-icons/cg";
import CarbonFootprintService from "requests/services/CarbonFootprintService";
import "./Analytics.css"

const options = {
  legend: {
    labels: {
      font: {
        size: 30,
      },
    },
  },
  scales: {
    x: {
      beginAtZero: true,
      title: {
        display: true,
        text: "Month",
        font: {
          size: 20,
          weight: "bold",
        },
      },
      ticks: {
        font: {
          size: 20,
        },
      },
    },
    y: {
      beginAtZero: false,
      title: {
        display: true,
        text: "Carbon Footprint (Watts)",
        font: {
          size: 20,
          weight: "bold",
        },
      },
      ticks: {
        max: 500000,
        font: {
          size: 20,
        },
      },
    },
  },
};

function CarbonChart() {
  const SESSION_ACCOUNT_GUID = "11111111-1111-1111-1111-111111111111";

  const [isDataLoading, setIsDataLoading] = useState(false);
  const [isDataError, setIsDataError] = useState(null);
  const [graphData, setGraphData] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState(null);
  const [selectedYear, setSelectedYear] = useState(null);
  

  function getCarbonFootprintData() {
    setIsDataError(false);
    setGraphData(null);
    setIsDataLoading(true);
    CarbonFootprintService.getCarbonFootprintData(
      SESSION_ACCOUNT_GUID,
      selectedYear,
      selectedMonth
    ).then((response) => {
      console.log(response);
      const carbonFootprintData = response.data.data;
      const graph = {
        labels: [],
        datasets: [
          {
            label: "My Household Carbon Footprint",
            backgroundColor: "rgb(255, 99, 132)",
            borderColor: "rgb(255, 99, 132)",
            data: [],
          },
          {
            label: "National Household Average Carbon Footprint",
            backgroundColor: "rgb(124,252,0)",
            borderColor: "rgb(124,252,0)",
            data: [],
          },
        ],
      };

      graph.datasets[0].data = carbonFootprintData.map((data) => {
        return data.householdConsumption;
      });
      graph.datasets[1].data = carbonFootprintData.map((data) => {
        return data.nationalHouseholdConsumption;
      });
      graph.labels = carbonFootprintData.map((data) => {
        return `${data.yearOfAnalysis}-${data.monthOfAnalysis
          .toString()
          .padStart(2, "0")}`;
      });
      setGraphData(graph);
      setIsDataLoading(false);
    }).catch(err => {
      setIsDataLoading(false);
      setIsDataError(true);
    });
  }

  const dropDownHandler1 = (e) => {
    let value = e.target.value || 1; // set default value to "1" if e.target.value is false
    setSelectedMonth(value);
    // getCarbonFootprintData();
  };

  const dropDownHandler2 = (e) => {
    let value = e.target.value || 2023; // set default value to "2023" if e.target.value is falsy
    setSelectedYear(value);
  };

  useEffect(() => {
    getCarbonFootprintData();
  }, [selectedMonth, selectedYear]);

  return (
    <Flex direction="column" justify="center" align="center">
      <Heading pb={5}>Carbon Footprint</Heading>
      <Text pb={10}>
        This is your carbon footprint. Carbon footprint is the total amount of
        greenhouse gases (including carbon dioxide and methane) that are
        generated by our actions.
      </Text>

      <Box paddingTop="15">
        <Text>Select the month and year:</Text>
        <Box display="flex" alignItems="center" paddingBottom={10}>
          {/* Month dropdown */}
          <Select
            placeholder="Month"
            onChange={(e) =>
              dropDownHandler1({
                target: { value: parseInt(e.target.value) || 1 },
              })
            }
            width={"200px"}
            variant="filled"
            mr={2}
          >
            <option value={1}>January</option>
            <option value={2}>February</option>
            <option value={3}>March</option>
            <option value={4}>April</option>
            <option value={5}>May</option>
            <option value={6}>June</option>
            <option value={7}>July</option>
            <option value={8}>August</option>
            <option value={9}>September</option>
            <option value={10}>October</option>
            <option value={11}>November</option>
            <option value={12}>December</option>
          </Select>
          {/* Year dropdown */}
          <Select
            placeholder="Year"
            onChange={(e) =>
              dropDownHandler2({
                target: { value: parseInt(e.target.value) || 2023 },
              })
            }
            width={"200px"}
            variant="filled"
          >
            <option value={2022}>2022</option>
            <option value={2023}>2023</option>
            {/* add more years as needed */}
          </Select>
        </Box>
      </Box>

      {isDataLoading && (
        <Flex direction="row" justify="center" align="center" background={"yellow.200"} padding="5" rounded={20} dropShadow="md">
          <CgSpinnerAlt className="loaderIcon"/>
          <span>Hang on, we are loading your data.</span>
        </Flex>
      )}

      {isDataError && (
        <Flex direction="row" justify="center" align="center" background={"red.200"} padding="5" rounded={20} dropShadow="md">
          <BiErrorCircle className="errorIcon"/>
          <span>Something went wrong in the backend service. Did you select a month and year?</span>
        </Flex>
      )}

      {graphData && <Line options={options} data={graphData} />}
    </Flex>
  );
}

export default CarbonChart;
